{"earth/Avoid-Waste-with-R's":{"title":"Avoid Waste with R's","links":[],"tags":[],"content":"The hierarchy of waste management:\n\nreduce: Buy only what is needed. Buy less often.\nreuse: Buy high quality and reuse items before throwing them in the trash.\nrecycle: If you trash items, put them in the correct recycling bins.\n\nFurther R’s:\n\nrefuse Actively counteract waste. Unsubscribe paper ads.\nrepair: Fix stuff before tossing it.\nrot: Compost organic waste.\n\nSee CircleWaste: What are the 5 R’s of Waste Management?."},"index":{"title":"Welcome to Quartz","links":[],"tags":[],"content":"This is a blank Quartz installation.\nSee the documentation for how to get started."},"info/CRUD-Operations":{"title":"CRUD Operations","links":[],"tags":[],"content":"Stands for Create, Read, Update and Delete and are the four basic operations of persistent storage.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCRUDHTTPSQLCreatePOSTINSERTReadGETSELECTUpdatePUTUPDATEDeleteDELETEDELETE"},"info/Classification-Error-Types":{"title":"Classification Error Types","links":[],"tags":["precision","recall"],"content":"There are two error types in classification problems: False positives (FP) and false negatives (FN). I find it more convenient to think in False Alarms (FP) and Missed Hits (FN).\n\n\n\n                  \n                  Example: “Is a person infected?” \n                  \n                \n\n→ classify each person into infected/healthy\n\nError 1 (FP), False Alarm: classify “infected” but is healthy\nError 2 (FN), Missed Hit: classify “healthy” but is infected\n\n\n\nClassification tests can be tuned to favor one error over the other:\n\nFavor false alarms: HIV test → You do not want to miss an infected person\nFavor missed hits: Airbag trigger → You do not want an exploding airbag in your face when driving normally\n\nFor example, the sensor in the car for triggering the airbag is designed to favor missed hits but almost never produce a false alarm. Thus, the airbag may only trigger 50% of the time when having a bad accident but should never trigger when bumping into a pot hole. The rationale is that an airbag that unexpectedly explodes into your face during normal driving leads to accidents in over 50% of the time."},"info/DOER-Process-Documentation":{"title":"DOER Process Documentation","links":["info/DOER-Process","Getting-Things-Done-(GDT)"],"tags":[],"content":"This is the describing page for DOER Process.\nThinking about Organize\nPossible task lists (not inbox!):\nSW Dev: 2approve–2build←2check←2do←2grow←2plan←2sort\nPDCA but backwards: 2check–2do–2plan  (It is important to do check tasks first!)\nGarden analogy: seeds (grow), tree(project), roots (checks), leafs/fruits (acts)\n\nInbox (2sort): Where everything arrives\nIncubator / Garden (2grow):\n\nSeeds / Cell / Egg: Abstract Idea\nSoon / Receptor: Wait for specific condition\n\n\nPlanner Tool: Kanban-Board / Worklists (of actionable / checkable):\n\n🟠Check /Calls/ Pending 2check (need checking) → Or in communication?\n🟡Do /Actions/Focus/Active 2do (do soon)\n🟣Plan / Grow / Feed / Horizon / Init / Define / Next 2plan (stored) → Or Incubator?\n(Done) → Not shown\n🟢Export / Publish / Finish / Finalize  → Not a task category! (same as done)\n🔷Hold / Keep / Maybe / Res / Rest/ Know\n\n\nCalendar: For events.\nCommunication Tool.\n\nShould track where answers are pending. →Use colors? 🔺Important/Problem\n\n\nLibrary / Data: For general resources, ideas, articles\nProjects: For complex topics\n\nIdeas: Horizon\nProjects: Testing\nVersion:\n\n\n\n2sort, Act, await/aw8, Due, Horizon,  Got, Res, w84 (“wait for”), Vision\n\nDefault task that is not in inbox is “Action Item”\nTasks with due date is calendar or start with “Event: “\nAwait tasks start with “await” “w84”, “Condition”\nCommunication tasks are “call”\nReferences/Resources start with “res”  (not urgent)\nGoals, future, later, plan\n\nAlternative Names\nCCORE: Capture–Clarify–Organize–Review–Engage\nDOER: Dump/Deposit/Defer–Organize–Engage–Review\nC–DOER: Collect, Direct, Organize, Engage, Review\nClever-DOER\nC3ER: Capture, Clarify, Categorize, Engage, Review\nCALL – Collect–Arrange/Aim–L–Learn\nCODE – Collect–Organize–Do–Evaluate\nCOWS – Collect – Arrange – Work – Scan\nOld CORE Process 2023-08-16\nA method for processing documents and information based on GTD. CORE stands for:\n\nCapture: Store any input at a central “inbox”. URLs, ToDos, Notes, Talks, PDFs, Quotes, etc.\nOrganize: Go through the inbox and define next step for each item:\n\nDo it now: If it is a task that requires less than 2min, execute immediately.\nDelegate: Forward the item to another person.\nDefer: Put into the correct list: act, aw8, calendar, later, projects, resources, someday\n\n\nReview/Reflect:\n\nDaily: Get your inbox to zero. Review tasks or Reduce information.\nWeekly: Update your lists/info.\n\n\nExecute: Express/Export information in own words. Engange/Execute a task.\n\nCapture: Out of your brain\nCapturing allows you to get something off your mind quickly. When a thought hits your brain, it can (and will) suppress all other thoughts until you do something about it. You should transfer any new input into your inbox within few seconds.\n\nYour brain is made for having ideas… not for storing them.\n\nClarify\n\nDo it now: If it is a task that requires less than 2min, execute immediately.\nDelegate: Forward the item to another person.\nDefer: Put into the correct list: act, aw8, do, due, event, horizon, maybe, idea, later, projects, resources, someday\n\nOrganize\nOrganize each input by providing context (time, location, topic). Put into the correct list:\n\nAction-Items: A list of single-step actions that need to be done.\nCalendar: For events that will happen at a specific time.\nProjects: Everything that requires multiple steps is a separate list.\nMaybe Someday: Not forgetting. Might become relevant in the future.\nWaiting-on: Everything that depends on external events.\nReferences: All materials that could help at some point in time.\n\n\nThe wrong way to organize information is by where you found it. The right way is to organize by location where you will use the information. – Tiago Forte\n"},"info/DOER-Process":{"title":"DOER Process","links":["Getting-Things-Done-(GDT)"],"tags":[],"content":"A method for processing documents and information based on GTD. DOER stands for\nDOER Overview\n\nDump &amp; Decide: Dump any input as short note into a central “inbox”. URLs, ToDos, Notes, Talks, PDFs, Quotes, etc. After dumping, decide whether to\n\nDefer: Postpone the processing to step 2 (Organize)\nDelegate: Forward the item to another person.\n*Do it now: If it is a task that requires less than 2min, execute immediately.\n\n\nOrganize: Once you have time, put each item left into its correct list/location:\n\nPlanner: For action items. Sort into check, do, plan. Tag projects\nCalendar: For reminders, recurring, Meeting, Event\nIncubator: Goals, Ideas, Visions, Leads, Jots\nLibrary: Article, Ideas, Resources\n\n\nEngage: Execute a task, for example, Express/Export information in own words.\nReview/Reflect:\n\nDaily: Get your inbox to zero. Review tasks or Reduce information.\nWeekly: Update your lists/info.\n\n\n\nWorkflow Details\n1. Dump: Get it out of your brain\nDumping allows you to get something off your mind quickly. When a thought outside the current context hits your brain, it is exhausting to keep it present in the background. It is likely that you either forget the thought or it interferes with your current thinking context. You should transfer any new input into your inbox within few seconds.\n\nYour brain is made for having ideas… not for storing them.\n\nThen decide what should happen:\n* Defer: Postpone the processing to step 2 (Organize)\n* Delegate: Forward the item to another person.\n* *Do it now: If it is a task that requires less than 2min, execute immediately.\n2. Organize\nOrganize each input by providing context (time, location, topic). Put into the correct list:\n\nAction-Items: A list of single-step actions that need to be done.\nCalendar: For events that will happen at a specific time.\nProjects: Everything that requires multiple steps is a separate list.\nMaybe Someday: Not forgetting. Might become relevant in the future.\nWaiting-on: Everything that depends on external events.\nReferences: All materials that could help at some point in time.\n\n\nThe wrong way to organize information is by where you found it. The right way is to organize by location where you will use the information. – Tiago Forte\n\n→ Use alive, check, do, plan, stored\n3. Engage\nWork on the different items and projects.\n4. Review\nGo through your lists and clean up. Get your inbox to zero.\nDifferences to GTD\n\nGTD has 5 steps: 1. collect, 2. clarify, 3. organize, 4. review, 5. engage.\nDOER removed the “clarify” step by splitting it into “decision” and “adding context” and including these parts in “Dump &amp; Decide” and “Organize”.\nIn DOER you immediately do or delegate tasks once they come to your mind if this takes less then 2 minutes.\nIn DOER, the execution phase comes before the review phase as this seems to be more intuitive.\n\n📚 References\n\nwww.zenflowchart.com/guides/gtd-flowchart\n"},"info/Resolution–Precision–Accuracy":{"title":"Resolution–Precision–Accuracy","links":[],"tags":[],"content":"Since no measurement of a physical quantity is infinitely accurate, it is important to determine how much a measured value will most likely deviate from the unknown, true value of the quantity. There are three important metrics for the quality of a repeated measurement:\n\nResolution is the fineness to which an instrument can be read.\nPrecision is the fineness to which an instrument can be read repeatedly and reliably.\nAccuracy is how close a measured value is to the actual value.\n\nThink of an archer, trying to shoot a target:\n"},"mind/Logido":{"title":"Logische Selbstverteidigung","links":[],"tags":[],"content":"👨‍🔬 E. Regnath · 📆 Sep. 2022 · 🧪 v2 · 🇩🇪\nSchluss mit dem Debattierbrei! Lerne die drei Arten von Scheinargumenten mit Beispielen und werde noch heute zum Diskussions-Ninja mit einem schwarzem Gürtel „Lo-Gi-Do“.\nZur Erinnerung: Argumente sind logisch und korrekt, wenn die Schlussfolgerung notwendig aus relevanten und hinreichenden Prämissen folgt.\n  ┌────────────┐    Induktion →    ┌──────────────────┐\n  │ Prämissen  | ←–––––––––––––––→ | Schlussfolgerung |\n  └────────────┘    ← Deduktion    └──────────────────┘\nDeshalb können Scheinargumente in 3 Kategorien eingeteilt werden:\n\n🤷🏻‍♀️ Relevanzfehlschlüsse: Unabhängig von korrekter Logik, sind die Prämissen oder der Schluss nicht relevant. →  Ad Hominem • Strohmannargument • Whataboutism\n👉🏻 Schwache Induktion: Der Schluss folgt nicht notwendigerweise aus den Prämissen. →Scheinkausalität, Zirkelbeweis, Dammbruch, Spielerfehlschluss\n🦄 Schwache Prämissen: Die Prämissen sind nicht bewiesen, nicht anwendbar, mehrdeutig oder unvollständig.→ Einzelfall • Tradition • Emotion • Beweislastumkehr\n\n🤷🏻‍♀️ Relevanzfehlschlüsse\n\nBei Relevanzfehlschlüssen kann zwar die Logik an sich korrekt sein aber der Schluss ist nicht relevant für das ursprüngliche Argument.\n🤴🏻 Autoritätsargument (auch „Ad Hominem“) {#adhominem}\nEine Aussage wird dadurch als wahr belegt, weil sie von einer hohen Autorität oder Mehrheit geäußert wurde. Gleiches gilt für Widerlegung durch gering Autorität oder Minderheit.\n\n\n                  \n                  Beispiele \n                  \n                \n\n„Die Bundesregierung vertritt die Meinung, dass …“\n„Die meisten Menschen wissen, dass Milch essentiell für gesunde Knochen ist.“\n„Du brauchst mir nicht sagen, dass Alkohol schlecht ist, so viel wie Du immer trinkst.“\n\n\n\n\n                  \n                  Warum ist das falsch? \n                  \n                \n\nArgumente sollten sich auf Fakten beziehen und nicht darauf, welche oder wie viele Personen eine bestimmte Meinung haben. Es ist allerdings zulässig sich auf Personen mit fachlicher Expertise zu berufen, sofern diese einen neutralen Standpunkt haben. Im Beispiel hat\n\n\n🗿 Strohmann-Argument {#strohmann}\nEine Aussage wird stark verzerrt/vereinfacht/abgewandelt und so ein Argument angegriffen, welches der Sprecher in dieser Weise gar nicht vertritt.\n\n\n                  \n                  Beispiele \n                  \n                \n\n„Wenn Du Fleisch isst, dann bist Du wohl auch mit Tierquälerei an Schlachthöfen einverstanden.“\n\n\n\n\n                  \n                  Warum ist das falsch? \n                  \n                \n\nDie Realität ist ein komplexes Konstrukt und man findet viele implizite Korrelationen und Assoziationen. Die Positionen in einer Diskussionen können aber sehr differenziert sein. Eine Person kann Fleischkonsum befürworten und gleichzeitig Tierquälerei ablehnen (z.B. „Es ist OK Tiere für Fleisch zu töten aber sie sollen dabei nicht leiden“).\n\n\n📣 Whataboutism {#whataboutism}\nDie Diskussion wird auf ein anderes Problem/Argument gelenkt, welches wichtiger/richtiger als das ursprüngliche Argument erscheint.\n\n\n                  \n                  Beispiele: \n                  \n                \n\n„Bevor wir Plastikstrohhalme in Deutschland verbieten, sollten wir lieber die Ozeane vor Überfischung schützen, denn die ist viel schädlicher.“\n\n\n\n\n                  \n                  Warum ist das falsch? \n                  \n                \n\nNur weil es wichtigere Probleme oder Argumente gibt, bedeutet das nicht, dass ein kleineres Problem oder Argument irrelevant oder falsch ist. Im Gegenteil: Löst man zuerst kleinere Probleme, kann man schneller und langfristiger von der Verbesserung profitieren.\n\n\n👉🏻 Schwache Induktion\n\nBei schwacher Induktion ist unklar, ob aus den Beobachtungen oder Prämissen notwendigerweise die Schlussfolgerung hervorgeht.\n☔ Scheinkausalität {#scheinkausal}\nZeitlich oder örtlich gemeinsam auftretenden Ereignissen wird eine falsche/ungeklärte Ursache-Wirkung Beziehung unterstellt.\n\n\n                  \n                  Beispiele: \n                  \n                \n\n„Seit der Wahl läuft die Wirtschaft gut. Die Regierung leistet gute Arbeit.“\n„Kein Wunder, dass Natalie so gute Noten bekommt. Sie ist der Liebling der Lehrerin.“\n\n\n\n\n                  \n                  Warum ist das falsch? \n                  \n                \n\nKorrelation ≠ Kausalität. Zum Beispiel korreliert Regen mit aufgeklappten Regenschirmen aber es ist keine Kausalität, da für beide Ereignisse (Regen/Regenschirm aufgeklappt) andere Ursachen existieren können.\n\n\n🌊 Dammbruch / Absurdum / Perfektionismus {#dammbruch}\nDie Schlussfolgerung wird so überspitzt, dass das Argument falsch erscheint. Oder: Wenn es keine perfekte Lösung gibt, gibt es gar keine.\n\n\n                  \n                  Beispiele: \n                  \n                \n\n„Wenn wir die gleichgeschlechtliche Ehe erlauben, wird bald jemand verlangen, dass auch Gruppenehen erlaubt werden.“\n„Was bringen schon Geschwindigkeitsbegrenzungen? Die Leute fahren doch trotzdem zu schnell.“\n\n\n\n\n                  \n                  Warum ist das falsch? \n                  \n                \n\nArgumente, die sich auf ein Spektrum beziehen, gehen oft implizit von einem „angemessenen Grad“ aus. Auch wenn dieser Grad oft unscharf ist, bedeutet dass nicht, dass eine Position automatisch ein Extrem darstellt (Also ob ein Tropfen mehr gleich zum Dammbruch führt). Jemand der den Ausbau des Mobilfunknetzes fordert, möchte vermutlich weder einen einzelnen Mast, noch auf jedem Hausdach einen eigenen Mast bauen, sondern eine „angemessene Menge“ dazwischen.\n\n\n\n🛸 Evidence of Absence\nEine nicht-Existenz wird durch fehlende Belege bewiesen.\n\n\n                  \n                  Beispiel: \n                  \n                \n\n„Niemand hat je ein UFO gesehen, also gibt es keine UFOs.“\n\n\n\n\n                  \n                  Warum ist das falsch? \n                  \n                \n\nNur weil man bisher noch keinen Nachweis gefunden hat, folgt daraus nicht zwingend dass es keinen Nachweis gibt. Wenn die Möglichkeit besteht, dass man einen Nachweis finden kann, wäre der voreilige Schluss zur Nicht-Existenz in dem Moment falsch wo der Nachweis gefunden wird.\n\n\n\n🦄 Schwache Prämissen\n\n1️⃣ Einzelfall Verallgemeinerung {#einzelfall}\nEin paar wenige Beispiele werden benutzt, um ein verallgemeinerte Aussage zu bestätigen.\n\n\n                  \n                  Beispiele: \n                  \n                \n\n„Rauchen ist nicht schädlich, mein Papa hat sein ganzen Leben geraucht und ist kerngesund.“\n„Die letzten Anschläge wurden von Islamisten durchgeführt. Alle Muslime sind Islamisten.“\n\n\n🎆 Tradition/Veraltet/Neuheit {#tradition}\nDas Alter wird als Argument benutzt. Etwas ist wahr/gut, weil es schon immer so gemacht wurde. Etwas ist gut/schlecht weil es alt ist. Etwas ist gut/schlecht weil es neu ist.\n\n\n                  \n                  Beispiele: \n                  \n                \n\n„Ja, es wurde Geld unterschlagen, aber das kommt bei jeder Bank vor.“\n„Es gab schon immer eine Form der Regierung. Gesellschaft ohne Regierung ist nicht möglich.“\n„Homosexualität ist unnatürlich. Tiere machen sowas ja auch nicht.“\n\n\n😡 Emotion {#emotion}\nÜberzeugungsversuch durch Aussagen, die starke Emotionen wie Angst, Wut, oder Scham auslösen.\n\n\n                  \n                  Beispiel: \n                  \n                \n\n„Bevor Du Amen sagen kannst, gibt es mehr Moscheen als Kirchen.“\n\n\n\n\n                  \n                  Warum ist das falsch? \n                  \n                \n\nEine starke Emotion überdeckt die Suche nach objektiven Fakten. Im Beispiel ist die schwache Prämisse, dass Moscheen an sich etwas schlechtes sind oder dass mehr Moscheen als Kirchen verhindern, dass Christen ihrer Religion weiterhin nachgehen können.\n\n\n🧹 Manipulation der Beweislage\nDurch geschicktes Verschweigen von relevanten Informationen, bzw. einstreuen von irrelevanten Informationen wird die Auswahl an Alternativen so manipuliert, dass nur eine davon richtig erscheint.\n\n\n                  \n                  Beispiel: \n                  \n                \n\n„Die Irakische Regierung produziert bereits chemische und biologische Waffen, also wird sie auch Atomwaffen produzieren.“\n\n\nWeitere Beispiele\n\n“Ein Kind ist ein Geschenk Gottes und Abtreibungen wären Mord und sollten verboten sein. Eine Ausnahme wäre bei Vergewaltigung da ist es noch Ok abzutreiben.”\n“Transvestiten mit Geschlechter-Identitätsstörung, denen man eine Operation anbietet sind wie Magersüchtige mit Essstörung, denen man eine Fett-Absaugung anbieten würde.”\n\n📚 Referenzen\n\nLukeStoneHm: „Logische Selbstverteidigung“\nWikipedia „Typen von Argumenten“\nAlica Joe: „Scheinargumente: Warum mich Kritik (oft) nicht juckt“ 2022\n"},"mind/The-37-percent-Stopping-Rule":{"title":"The 37% Stopping Rule","links":[],"tags":[],"content":"👨‍🔬 E. Regnath · 📆 Jun. 2023 · 🧪 v-0.2\nHow to choose wisely if you know little: Observe 25%–37% of options, then select the next best.\nThe optimal strategy for selecting the best car, phone, or romantic partner is easy to follow and proven by math – yet known by few. If N is the number of options, T the maximum time to decide, and P the probability that you get the option if you select it, we can derive the optimal strategies that are shown in the following table.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConditionProblemStrategyKnown N, P=1InterviewsObserve 37% of N, choose next bestKnown T, P=1PurchasingObserve 37% of T, choose next bestKnown T, P=0.5MarriageObserve 25% of T, choose next best\n\nKnown N and P=1: This is called the secretary problem in which you interview N applicants for a secretary position and need to decide to reject or accept each applicant directly after the interview. P = 1 means that an applicant will take the job if you make an offer. The optimal strategy to maximize the chance for selecting the best candidate\nKnown T and P=1:  If the number of options is unknown, we can apply the same rule to the timeframe we have: Observe options (as they come in) for 37% of the time, then select.\n\n\n\n                  \n                  Good Choice Variant: \n                  \n                \n\nIf the goal is to maximize the chance for a good selection instead of the chance of hitting the best choice, a shorter observation ratio of 25% is better.\n\n\n📚 References\n\nAlgorithms to Live By: The Computer Science of Human Decisions, 2017\nUp and Atom: “When to Quit”, YouTube\n"},"society/Meeting-Manifesto":{"title":"Meeting Manifesto","links":[],"tags":[],"content":"👨‍🔬 E. Regnath · 📆 Mar. 2023 ·  🧪 Draft 0.1 ·\nAll meetings consume time and money. Many meetings waste time and money. Here are 12 rules for running a meeting efficiently.\n\nShare Goal &amp; Agenda upfront: What should be the outcome? What will be discussed? Not answering both questions means the meeting is unnecessary.\nFlag people as optional: Flag most people as optional and let them decide whether the meeting is valuable to them. Allow them to leave early so that they dare to join. Hint: If you can check mails during a meeting, you are optional. If everyone can check mails, the meeting is optional.\nBe prepared: You don’t need five people to watch one person look up numbers in a report.\nMake notes: Decisions and Action Items that are not written down and tracked will be forgotten.\nStart on time: Waiting for latecomers might seem like a nice gesture but is disrespectful towards the people that joined on time. Either truly start 9:00 or schedule for 9:05.\nDiscuss with ≤5 people: If you have more than 5 people, your meeting should be a single-person show (presentation/status report), a parallel collaboration (e.g. conceptboard), or a voting. Remember: On TV, you never see discussion rounds with more than 5 people and there are reasons for it.\nDiscuss at least three ideas. One idea is bad, two ideas is an argument, three ideas is a discussion.\nHave a parking lot for off-topics: Whenever a discussion starts drifting off, make a note of the idea/concern and deal with it later. Stay focused on the agenda/outcome unless the off-topic is a blocking issue for everyone.\nBe clear, not clever: Avoid technical jargon and use concise and easy words. Not everyone has the same knowledge background, language/pronunciation skills or WiFi stability.\nSilence is confirmation. Do not wait for positive verbal feedback. Ask for concerns and/or collect votes using the Approval Voting System (ask for all the OKs).\nPractice active listening. People won’t hear your idea unless you’ve heard theirs.\nDon’t follow these rules. Follow the principles they reflect.\n\n📚 References\n\nwww.linkedin.com/pulse/see-below-6-rules-productivity-from-elon-musks-leaked-lauren-mcdonald/\n"},"society/Willenspunkte-System":{"title":"Willenspunkte-System","links":[],"tags":[],"content":"👨‍🔬 F. Wolff &amp; E. Regnath · 📆 Dec. 2022 ·  🧪 Entwurf v1.1\nDie Frage “Wer isst das letzte Kuchenstück?” startet oft ein soziales Mind-Game das verbales Fingerspitzengefühl erfordert. Vielleicht hättest Du das Kuchenstück gerne aber Du willst auch nicht unhöflich wirken? Genau dafür bieten Willenspunkte eine neutrale Möglichkeit um Vorlieben und Abneigungen zum Ausdruck zu bringen. Das Willenspunkte-System hilft bei der Entscheidungsfindung innerhalb von Gruppen und ist besonders gut für zwei Arten von Abstimmungen geeignet:\n\nAngebot für eine Person, z.B. “Wer isst das letzte Kuchenstück?”\nAuswahl für eine Gruppe, z.B. “Was wollen wir spielen? A oder B?”\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPunkteGenerelle BedeutungBeispiel Kuchen4😍 Yeah! Ich will das unbedingt!Sonst bin ich traurig!Viel Hunger und Lieblingskuchen!3😁 Jaa, ich hab schon ziemlich Bock darauf.Hunger oder mag diesen Kuchen sehr.2😃 Jo, ich hätte Lust aber es ist mir nicht so wichtig.Generell Appetit auf Kuchen.1🙂 Ok. Wäre dabei aber auch Ok wenn nicht.Wenn ihn sonst keiner will…-1😐 Hm. Eher nicht aber wäre auch dabei.Eigentlich satt aber bevor er weggeworfen wird…-2🙁 Ne, bin dagegen aber zur Not lass ich mich überreden.Bin voll aber Oma ist sonst traurig.-3☹ Nein, das muss jetzt echt nicht sein.Platz gleich. Entweder morgen oder Müll.-4😭 Niemals! Das wäre das schlimmste. Ich weigere mich!Allergisch auf Kuchen!\n\n\n                  \n                  Wichtig: \n                  \n                \n\nDie Willenspunkte spiegeln keine Entscheidung wider, sondern sind nur ein Ausdruck der persönlichen Einstellung zur Frage!\n\n\nAuf die Zahl 0 wurde verzichtet, um Enthaltungen zu vermeiden.\nVorteile:\n\nDurch eine klare Zahlenzuweisung kann besser unterschieden werden.\nAlle wissen, wie sehr eine Person etwas will und so ist es für eine 2 auf Kuchen auch leicht zu akzeptieren, wenn die Person mit 3 Willenspunkten den Kuchen bekommt.\nZahlen sind neutral und man bevorzugt keine.\n\nAnalysierte Varianten\nAls Referenz sind hier weitere Varianten aufgelistet, die wieder verworfen wurden.\n\n\n                  \n                  Option A: 1..4 \n                  \n                \n\nDas ursprüngliche System: Wer isst das letzte Stück?\n\n1: Zur Not, bevor es weggeschmissen wird, esse ich es\n2: Ich würde es essen, überlasse es aber auch gern anderen\n3: Ich hab schon ziemlich Bock drauf oder hab Hunger\n4: Ich will es! Es ist mein Liebling, macht mich sehr glücklich\n\n→ Getestet, funktioniert sehr gut. Aber: nicht geeignet um genauere Abstimmungen vorzunehmen\n\n\n\n\n                  \n                  Option B: -3 .. 3 (ohne 0) \n                  \n                \n\nFür z.B. Wollen wir Spiel X spielen?\n\n-3: Stark dagegen ()\n-2: Dagegen (Will Nicht essen)\n-1: Eher dagegen aber OK  (Zur Not essen)\n1: Eher dafür aber Ok falls nicht (Leichter Appetit)\n2: Dafür (Will essen)\n3: Stark dafür ()\n\nProbleme:\n\nNur 3 positive Möglichkeiten sind zu wenig (Tendenz zur Mitte)\n-1 schwierig. Wenn es bedeutet (“will nicht”), dann sind -2/-3 fast egal. Wenn -1 als erstes positives gilt (“Zur Not esse ich”) ist der Zahlenwert nicht intuitiv &amp; großer Sprung von 1 zu -1\n\n\n\n\n\n                  \n                  Option C: -4, -2, 0,1,2,3 \n                  \n                \n\nMittelwert ist 0 und -4 in einer Zweierabstimmung ist eine Art “Veto”. 4 “positive” Werte, 0 = bevor es weggeschmissen wird. → Warum nicht -3..3?\n\n-4: Gar kein Bock (ich bin raus/dumme Idee)\n-2: Dagegen\n0: Mir egal, bin mit beidem einverstanden\n1: Eher dafür aber Ok falls nicht\n2: Dafür\n3: Stark dafür\n\n→ Vorteil: Liefert leichter ein eindeutiges Ergebnis bei gerader Anzahl an Personen. Respektiert, dass es schlimmer ist, etwas zu machen was man nicht will, als etwas nicht zu machen was man will.\n\n\n\n\n                  \n                  Oder ganz anders? \n                  \n                \n\n\n-1..2 (-1 Dagegen, 0 Eher nicht aber Ok, 1 Dafür, 2 Stark dafür)\n-4, -2, 0, 1, 2, 3 (avg. 0, 2–1–3)\n-4, -2, -1, 1, 2 4\n-6, -3, -1, 1, 2, 3, 4  (avg 0, 3–4)\n-8 -2 1 2 3 4  (avg 0, 4 positive Optionen, 6 gesamt)\n-5 -1 1 2 3 (avg0, 3 positive)\n-5 -3, -1 1 2 3 (- 0.5!, 3–3)\n-3, -1, 1, 3\n-10, -3, -1, 1, 2, 4, 7 (nonlin)\n-7, -3, -1, 1, 2, 3, 5 (all prime, avg0, 3–4, nonlin)\n\n\n"},"tech/File-based-Version-Control":{"title":"File-based Version Control","links":[],"tags":[],"content":"👨‍🔬 E. Regnath · 📆 2024-04 · 🧪 v1.0\nDo you have files and folder names including terms like final, final2, old, or v2? Then file-based version control might be for you.\nVersion control systems have been proven to be highly effective in handling the chaos of ever changing text files and open-source development would not be possible without it. However, not everyone is a software developer, has only text files, or wants to use extra tools (like git).\nLuckily, we can implement a simple version control for everyone and everything just by adding a ≤4 letter version tag to a filename based on 4 simple rules.\n4 Rules to tame them all\n\nA file without a version tag is the latest working version (think “staging” in git)\nTo “commit” a version for yourself, save a copy of the working version and add a version tag with leading zero (e.g. -v01) to the file name.  Version tags start with -v01 and strictly increase. After -v09 continue with -v010. Version tags must be unique – if two file have the same tag, they must be identical.\nNever ever edit a file with a version tag! Either continue editing the latest working version, replace it with a copy of any committed version and remove the version tag (“roll-back”), or “branch” by creating a second working version with a working tag instead of a version tag, which could be -w03 if you edit -v03.\nTo “release” a version that will be shared with a larger group, add a release tag of the form -v1.0 without leading zeros and with a dot. Any version can become a release, e.g. turning v07 into v1.2 is fine.\n\nThat’s it. Most of these rules should be intuitive and easy to follow. The only crucial rule you need to remember and strictly enforce is rule 3, so let’s repeat it:\n\n\n                  \n                  “Never ever edit a file with a version tag!” \n                  \n                \n\nIf you want to edit a version, close the file (if open), make a copy, remove the tag and only then open it for editing. Follow this process strictly as editing an open version file with the intent to “save as” later is error-prone – forget it once, or hit Ctrl + S by accident and the system breaks.\n\n\nRationales behind the rules\n\nRule 1 makes sure that you do not need to rename any files in order to start with the system. Any regular file without a version tag is by definition already in its latest working version. You can either keep it untouched or edit it – full flexibility.\nRule 2 defines the main ideas of the scheme: We add a special tag to any version we want to identify throughout time. This is enables us to keep track of progress, inspect previous versions, roll-back to a version, or agree on versions with others (e.g. “did I sent you v03 or v04?”). Starting with a leading zero ensures that we can distinguish versions for internal tracking from releases that are shared with a larger group.\nRule 3 makes sure that the scheme is robust, meaning that version tags are unique. The whole point of versions is to uniquely identify a certain state so there must not be different files with the same tag. And “must not” means never – otherwise the trust in the system is broken. To ensure that you should never open a version file\nRule 4 makes sure that the scheme is compatible with exiting conventions of software releases and thus intuitively understood by many people. At the same time release tags without leading zero and dot are clearly distinctive from internal version tags. More technically, the two tag forms have a Levenshtein distance of ≥2, which allows us to detect simple mistakes. For example, -v010 and -v1.0 are both valid forms but -v10 (e.g. accidently produced by typo) would be invalid and requires clarification and correction.\n\nAdditional Ideas\n\nIn a collaborative environment, you could also add the name of the editor behind the version tag. Just make sure that the version tag increases not matter what. For example, if Alice and Bob take turns in editing a file we would see -v03-bob, -v04-alice, -v05-bob.\nStore all files with version tags in a versions subfolder.\nYou may jump to -v010 to indicate versions after a release v1.0\n\n📚 References\n\nWikipedia: Software Versioning\n"},"tech/Non-Functional-Requirements":{"title":"Non-Functional Requirements","links":[],"tags":[],"content":"A short overview of possible NFRs.\n\nFunctional requirements specify what the system should do. E.g. “Display the last user ID that logged into the system.”\nNon-functional requirements specify how the system should be. E.g. “The system should be secure against code injection attacks.” \n\nNFRs have many different names and can be classified according to different hierarchies/dimensions. According to ISO/IEC 25010:\n\nHowever, some categories seem very related (compatibility &amp; portability), some popular terms are missing (sustainability, transparancy, safety, privacy) and the overview does not provide definitions. The following list/tree is an attempt to give some concise structure to NFRs but different projects might prefer different structures.  Further NFR overviews can be found on Wikipedia.\n🛴 Efficiency: Consume few resources to produce/operate.\nThis can be distinguished according to the resource type:\n\n🕑 Time:\n\n⏳ Latency: Time to respond to one request.\n🚿 Throughput: Maximum amount of processed requests per time interval.\n\n\n⬜ Space:\n\n💾 Storage: How much data is stored?\n✉ Message: How much data is transmitted?\n\n\n⚡ Energy: How much energy is required to produce/operate?\n💰 Cost: How much money is required to produce/operate?\n\n⛓ Reliability: Ensure system remains operational.\n\n🌐 Availability: Avoid and mitigate failures to increase “uptime”.\n\n🛡 Robustness: Do not crash on unexpected requests.\n🪂 Fault Tolerance / Redundancy / Resilience: Recover from failures.\n📈 Scalability: Handle increased load and avoid stalling/dropping requests.\n\n\n🔒 Security: Avoid and mitigate misuse/tampering.\n\n👁‍🗨 Confidentiality: data should not be revealed to unintended recipients.\n✂ Integrity: data should not be changed during transmission.\n🛂 Authenticity: data must originate from the correct entity.\n\n\n\n🔧 Universality/Flexibility: How many problems can the system solve?\n\n💱 Interoperability/Compatibility: Ability to interact with other systems.\n🧳 Portability/Adaptability: Ability to operate in different environments.\n♻ Reuseability: Ability to reuse parts for other systems.\n📈 Scalability: Ability to scale efficiently with growing input.\n\n🚧 Maintainability: How easy can a system be repaired/modified?\n\n🎲 Determinism / Testability: Ability to reproduce behavior.\n🔍 Transparency / Verifiability: Ability to analyze behavior.\n🧩 Modularity: Separation into independent parts to lower complexity.\n➕ Extensibility: How easy can the system be extended?\n📖 Documentation: How well is the system documented?\n\n👥 Usability: How easy can the system be used?\n\n▶ Simplicity/Learnability: How intuitive is the system?\n🌍 Localization: Available and adapted to many languages/locations.\n♿ Accessibility\n\n⚖️ Compliance (Trustability?):\nThis section is not well-defined yet. Some of these points might better fit somewhere else.\n\n🌱 Sustainability: Minimizing negative impact on the environment, society and economy\n🎭 Privacy / GDPR / SSI: Ability to self-manage/protect personal data. Users cannot be identified.\n👉 Accountability: Ability to trace actions uniquely to each entity/agent.\n⛑ Safety: Protect users against harmful conditions or events.\n📝 Standardization: Rely on well-defined components and processes.\n\n✔ Correctness:\n\nThis section might be related to functional requirements.\n\n\n🎯 Accuracy: Response should be close to true value. Related to Precision/Resolution.\n🔬 Sensitivity: System should detect weak inputs.\n⏱ Freshness: Response should be recent.\n"},"tech/OAuth":{"title":"OAuth","links":[],"tags":[],"content":"OAuth2 is a protocol to share access tokens between different parties. OAuth is not an authentication protocol because it says absolutely nothing about the user. It is only concerned about tokens.\n\n🎯 Goal: An application (e.g. Printing) can access a content provider (e.g. Cloud Gallery) on behalf of a user by passing an access token.\n\nAdvantage: The service does not need to know any details about the user (e.g. username and password).\nBoth OAuth 1.0a &amp; 2.0 support two-legged authentication, where a server is assured of a user’s identity, and three-legged authentication, where a server is assured by a content provider of the user’s identity. Three-legged authentication is where authorization requests and access tokens come into play, and it’s important to note that OAuth 1 has those, too.\nProtocol Details\nThe usual flow of the protocol is as following:\n +--------+                               +---------------+\n |        |--(A)- Authorization Request -&gt;|   Resource    |\n |        |                               |     Owner     |\n |        |&lt;-(B)-- Authorization Grant ---|    (User)     |\n |        |                               +---------------+\n |        |\n |        |                               +---------------+\n |        |--(C)-- Authorization Grant --&gt;| Authorization |\n | Client |                               |     Server    |\n |  App / |&lt;-(D)----- Access Token -------|     (IDP)     |\n | Service|                               +---------------+\n |        |\n |        |                               +---------------+\n |        |--(E)----- Access Token ------&gt;|    Resource   |\n |        |                               |     Server    |\n |        |&lt;-(F)--- Protected Resource ---|(Content Prov.)|\n +--------+                               +---------------+\n\n\nThe application requests authorization to access service resources from the user\nIf the user authorized the request, the application receives an authorization grant\nThe application requests an access token from the authorization server (API) by presenting authentication of its own identity, and the authorization grant\nIf the application identity is authenticated and the authorization grant is valid, the authorization server (API) issues an access token to the application. Authorization is complete.\nThe application requests the resource from the resource server (API) and presents the access token for authentication\nIf the access token is valid, the resource server (API) serves the resource to the application\n\n\n\n                  \n                  Printing online Photos \n                  \n                \n\nAlice (Resource Owner) has stored Photos (Resource) at a Cloud Storage (Resource Server). She wants to enable a company PrintMagic (Client) to access a certain folder and print the photos.\n\n\nComponents\nRoles\n\nResource Owner: Entity (e.g. User) that owns resources and wants a service to use it.\nResource Server: The content provider for the resources, e.g. a cloud storage.\nClient: An service that wants to access resources of the user.\nAuthorization Server: An Identity Provider that authenticates the resource owner.\n\nData\nOAuth 2 uses and authorization grant and two types of tokens:\n\nauthorization grant: Can be one of three types:\n\nAuthorization Code: used with server-side Applications (most common)\n\n\nClient Credentials: used with Applications that have API access\nDevice Code: used for devices that lack browsers or have input limitations\n\n\nrefresh token. The refresh token becomes the permanent password equivalent, and it’s only ever transmitted over SSL.\naccess token: To access content, the service exchanges the refresh token for a short-lived access token. That way all sniffable HTTP accesses are made with a token that will expire. Google uses 5 minute expiration on their OAuth 2 APIs.\n\nFurther Details\n\nOpenID Connect is an authentication framework based on OAuth2\nGoogle provides an API key for any app (e.g. auth0.com) that wants to use their authentication service.\nGoogle Console: There you receive the API key for your application\n\n\n📚 References\n\nAn Introduction to OAuth 2 | DigitalOcean\nOAuth 2.0: Benefits and use cases — why? - Stack Overflow\n"},"tech/Unicode-Diagrams":{"title":"Unicode Diagram Drawing","links":[],"tags":[],"content":"You all have heard about ASCII art and have seen ASCII diagrams. But now UTF8 is default in most applications, and thus enables the creation of beautiful diagrams, like this one:\n  ┌─────────────────────┐\nA ┤╺━━━━━━━━━━━━        │ 62.5%   \nB ┤╺━━━━━━━━━━━━━━━━╸   │ 85.0%\nC ┤╺━━━━━━━━━╸          │ 50.0%\n  └┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴┘\n   ⁰ ¹ ² ³ ⁴ ⁵ ⁶ ⁷ ⁸ ⁹ ¹⁰\nOr to show directories and boxes:\n \nsome-dorectory/\n├── Dir_A\n│   └── File_C\n├── File_A\n└── File_B\n╭────────╮ ┌────────┐\n│ TestA  │ │ Test B │\n╰────────╯ └────────┘\nWhy character diagrams instead of images?\nThey are small, portable and text inlined diagrams that look decent even in a text editor. They are a good choice for Markdown-based systems and can also be pasted into many chat applications that have monospace font.\nFurther ideas\nUFT-8 diagrams do not need to be pure text. We embed them into HTML and so we can use CSS and JS to enable additional features.\n\nSelect fonts for different character ranges\nUse JS to reduce/increase font size until it fits into screen width\nUse JS to export to ASCII. E.g. replace all box drawing chars by closest ASCII char (┌─┐ → +-+)\nUse CSS to offer tooltips.\nUse links inside the diagrams.\n\nUnicode Box Drawing\nBox Drawing\n┌───────┐ ╭───────╮  ┏━━━━━━━┓  ╔═══════╗\n│ Box A │ │ Box B │  ┃ Box C ┃  ║ Box D ║\n└───────┘ ╰───────╯  ┗━━━━━━━┛  ╚═══════╝\n┌┬──────┐ ┌┬──────┐  ┏┳━━━━━━┓  ╔╦══════╗\n├┼──────┤ ├┼──────┤  ┣╋━━━━━━┫  ╠╬══════╣\n││Box A │ ││Box A │  ┃┃Box C ┃  ║║Box D ║\n└┴──────┘ └┴──────┘  ┗┻━━━━━━┛  ╚╩══════╝\nLines, Symbols, Shades\nThin:   ─ │ ╌ ╎ ┄ ┆ ┈ ┊     ╱ ╲ ╳\nThick:  ━ ┃ ╍ ╏ ┅ ┇ ┉ ┋\n\nArrow+Line: ─►  ◄─ \nArrows: ← ↑ → ↓ ↔ ↕ ↖ ↗ ↘ ↙ ↚ ↛ ↜ ↝ ↞ ↟ ↠ ↡ ↢ ↣ ↤ ↥ ↦ ↧ ↨ ↩ ↪ ↫ ↬ ↭ ↮ ↯ ↰ ↱ ↲ ↳ ↴ ↵ ↶ ↷ ↸ ↹ ↺ ↻ ⇄ ⇅ ⇆ ⇇ ⇈ ⇉ ⇊ ⇍ ⇎ ⇏ ⇐ ⇑ ⇒ ⇓\n\nBoxes:     ▢▣▤▥▦▧▨▩ ◧◨◩◪◫  ⚀⚁⚂⚃⚄⚅\nCircles:   ◍◎●○◐◑◒◓◔◕⬤\nTriagnles: ▲△▶▷▼▽◀◁   ▴▵▸▹▾▿◂◃  ♳♴♵♶♷♸♹♺\nRombs:     ◆◇◈\n\nShades: ░ ▒ ▓\nBlocks: █ ▌   ▁▂▃▄▅▆▇█  █ ▉ ▊ ▋ ▌ ▍ ▎ ▏   ⣀⣠⣤⣴⣶⣾⣿⣷⣦⣤⣄   ⣼⣧  ⣰⣸⣇⣆\n\nMisc: 𒐆 𒐪\n\n\n; 𝑎 𝑏 𝑐 𝑑 𝑒 𝑓 𝑔 ℎ 𝑖 𝑗 𝑘 𝑙 𝑚 𝑛 𝑜 𝑝 𝑞 𝑟 𝑠 𝑡 𝑢 𝑣 𝑤 𝑥 𝑦 𝑧  \n; 𝒶 𝒷 𝒸 𝒹 𝑒 𝒻 𝑔 𝒽 𝒾 𝒿 𝓀 𝓁 𝓂 𝓃 𝑜 𝓅 𝓆 𝓇 𝓈 𝓉 𝓊 𝓋 𝓌 𝓍 𝓎 𝓏\nSerif: 𝐚 𝐛 𝐜 𝐝 𝐞 𝐟 𝐠 𝐡 𝐢 𝐣 𝐤 𝐥 𝐦 𝐧 𝐨 𝐩 𝐪 𝐫 𝐬 𝐭 𝐮 𝐯 𝐰 𝐱 𝐲 𝐳\nSerif: 𝐀 𝐁 𝐂 𝐃 𝐄 𝐅 𝐆 𝐇 𝐈 𝐉 𝐊 𝐋 𝐌 𝐍 𝐎 𝐏 𝐐 𝐑 𝐒 𝐓 𝐔 𝐕 𝐖 𝐗 𝐘 𝐙\nSans:  𝗔 𝗕 𝗖 𝗗 𝗘 𝗙 𝗚 𝗛 𝗜 𝗝 𝗞 𝗟 𝗠 𝗡 𝗢 𝗣 𝗤 𝗥 𝗦 𝗧 𝗨 𝗩 𝗪 𝗫 𝗬 𝗭\nSans:  𝗮 𝗯 𝗰 𝗱 𝗲 𝗳 𝗴 𝗵 𝗶 𝗷 𝗸 𝗹 𝗺 𝗻 𝗼 𝗽 𝗾 𝗿 𝘀 𝘁 𝘂 𝘃 𝘄 𝘅 𝘆\nNums: ⓪ ① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳ ㉑ ㉒ ㉓ ㉔ ㉕ ㉖ ㉗ ㉘ ㉙ ㉚ ㉛ ㉜ ㉝ ㉞ ㉟ ㊱ ㊲ ㊳ ㊴ ㊵ ㊶ ㊷ ㊸ ㊹ ㊺ ㊻ ㊼ ㊽ ㊾ ㊿\n\n\n▤ ▤ ▢ + ◔◕◱ = ◩▤▣\n◪ ▤ ◔ +  ▣◕ =\n\n\n3-Stage Progress: ○◒⬤\n5-Stage Progress: ○◔◑◕◕⬤\n7-Iterations\nen.wikibooks.org/wiki/Unicode/List_of_useful_symbols\nyaytext.com/bold-italic/\n▤▤▢ + ◔◕◱ = ◩▤▣\n◪▤◔ +    ▣◕ = ◔◪◔\n◥◩▣ + ◪▢◱ = ▤▢◔\n◕◥▢◪◔▤◱_▣◩\n◩◪◥▤▢◱◒◔◕▣  ▟▙▗\n ¡puɐʇsɟdoʞ uǝu ןɐɯ ɥɔɐɯ ‘ᴉɥ\n ¡puɐʇsɟdoʞ uǝu ןɐɯ ɥɔɐɯ ‘ʎǝɥ\n ¿ɯnɹ ɥɔsןɐɟ sǝןןɐ ɹǝᴉɥ sᴉ ɯnɹɐʍ ןɐɯ ɓɐs\n ¿ɯnɹ ɥɔsןɐɟ ɹǝp sᴉ ɯnɹɐʍ\n z ʎ x ʍ ʌ n ʇʇʇ s ɹ b d o u ɯ ן ʞ ɾ ıᴉ ɥ ɓ ɟ ǝ p ɔ q ɐ\n😀😄😊😉🧬🛡🔍🔎✒⌛\n🙂 Useful Emoji Set\nUnicode Emojis can be used to make concepts more visually appealing.\nMeta-Data\n\n👤 Author\n👥 Authors\n📆 Date\n🏛 Institution\n📧 E-Mail · 📞 Phone\n\nDocument Structure\n\n⚡ Abstract\n🎯 Goal / Direction\n💡 Idea\n🧩 Challenges\n⚓🧱  State of the Art\n📈 📊 Evaluation\n⚖️ License, Terms &amp; Conditions\n🙏 Acknowledgment\n📚 References\n\nCoding\n\n📦 Packets (Software)\n💌 Features / Supporters\n📜 Instructions | 📖 Documentation\n🛠 Tools\n⚙ Settings\n✏ Edit\n\nStatus\n\n🏆 Achievement\n🎓 Academic\n💰 Funding\n⚠🚧 Warnung | 📣🔔 Announcements\n🧪 Experimental | 🗑 Deprecated\n🔥 Hot/new\n📡 Status: ❌🆘🟧🟨🟩❇✳✅\nRanking: 🥇🥈🥉\nPriority:\nLikelihood: ⚀⚁⚂⚃⚄⚅\n\nArrow Types: Timeflow ↣  Send ⇝  Implication → Evolution⇾ Move ⇥ Dimension ⇸\nFurther: 🌐♻👁‍🗨🗃👉🤝 ⬜🔳✅\n🥇🥈🥉\n☹😐🙂😀🤩\n📚 References\n\nwww.ietf.org/rfc/rfc2360.txt\nen.wikipedia.org/wiki/Geometric_Shapes_(Unicode_block)\n\nExamples\nClass diagrams\n \n┌─────────────────┐\n│     Manager     |\n├─────────────────┤\n│ +name: str      │\n├─────────────────┤ \n│ +run()          │\n│ +leave()        │\n└─────────────────┘\n \nDirectory Trees\nproject/\n ├─ build/\n ├─ docs/\n │  ├─ build/\n │  └─ src/\n ├─ make/\n ├─ res/\n │  ├─ img/\n │  │  ├─ dias/\n │  │  └─ logo/\n │  └─ css/\n ├─ src/\n └─ tmp/\n    ├─ logs/\n    └─ objs/\n\nQR Code\n█████████████████████████\n██ ▄▄▄▄▄ █▀▀█▀▀█ ▄▄▄▄▄ ██      █▀▀▀▀▀█ ▄▄ ▄▄ █▀▀▀▀▀█\n██ █   █ █▀▀▀▀██ █   █ ██      █ ███ █ ▄▄▄▄  █ ███ █\n██ █▄▄▄█ █▀███▀█ █▄▄▄█ ██      █ ▀▀▀ █ ▄   ▄ █ ▀▀▀ █\n██▄▄▄▄▄▄▄█▄▀▄▀▄█▄▄▄▄▄▄▄██      ▀▀▀▀▀▀▀ ▀▄▀▄▀ ▀▀▀▀▀▀▀\n██ ▄▄ ▄█▄▄  ▀▄▄ ▀ ▀ ▀ ▀██      █▀▀█▀ ▀▀██▄▀▀█▄█▄█▄█▄\n███▀▀   ▄█▀ █   ▄▄▀▀ ▄███       ▄▄███▀ ▄█ ███▀▀▄▄█▀ \n██▄█▄█▄█▄▄▀▄▀▄▄▀▄▀  ▀█ ██      ▀ ▀ ▀ ▀▀▄▀▄▀▀▄▀▄██▄ █\n██ ▄▄▄▄▄ █▄▀█▄▄ █ ▀▀  ███      █▀▀▀▀▀█ ▀▄ ▀▀█ █▄▄██ \n██ █   █ █ █ ▀▄▀ ▄ ▄▀▀███      █ ███ █ █ █▄▀▄█▀█▀▄▄ \n██ █▄▄▄█ █ ▄▄   █▄▀▀ ████      █ ▀▀▀ █ █▀▀███ ▀▄▄█  \n██▄▄▄▄▄▄▄█▄█▄█▄█▄▄█▄█▄███      ▀▀▀▀▀▀▀ ▀ ▀ ▀ ▀▀ ▀ ▀ \n█████████████████████████\n \n \nBraile does not work:\n⡏⡭⠭⡍⣟⢫⠛⡏⡭⠭⡍⡇\n⡇⠧⠤⠇⡗⡊⡒⡇⠧⠤⠇⡇\n⡯⢭⣭⡯⢉⡑⠡⢹⣙⡙⢙⡇\n⡷⠽⠭⠬⡅⣨⡽⣪⢃⡐⢏⡇\n⡇⡏⠉⡇⡏⣤⠡⢪⢃⡔⣻⡇\n⠧⠭⠭⠥⠧⠼⠽⠮⠤⠵⠽⠇\nsuperuser.com/questions/1420001/is-it-possible-to-create-a-qr-code-using-text\nPacket Diagrams\nASCII\n    0                   1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |Version| Prio. |                   Flow Label                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\nUTF-8\n₀0 1 2 3 4 5 6 7 8 9₁0 1 2 3 4 5 6 7 8 9₂0 1 2 3 4 5 6 7 8 9₃0 1  \n┌─┬─┬─┬─┬─┬─┬─┬─┼─┬─┬─┬─┬─┬─┬─┬─┼─┬─┬─┬─┬─┬─┬─┬─┼─┬─┬─┬─┬─┬─┬─┬─┐\n│Version┆ Prio. ┆                  Flow Label                   │\n└─┴─┴─┴─┴─┴─┴─┴─┼─┴─┴─┴─┴─┴─┴─┴─┼─┴─┴─┴─┴─┴─┴─┴─┼─┴─┴─┴─┴─┴─┴─┴─┘\n \n  0   1   2   3   4   5   6   7  \n┌───┬───┬───┬───┬───┬───┬───┬───┐\n│flp│ kg│ m1| m0|-s1|-s0|AK1|AK0|\n└───┴───┴───┴───┴───┴───┴───┴───┘\nPlots\n                                           ⢀⣀⠤⠤⠤⠤⢄⣀⡀            \n                                        ⡠⠔⠊⠁       ⠈⠑⠢⣀         \n                                     ⣀⠔⠉               ⠑⠢⡀      \n                                   ⡠⠊                    ⠈⠢⣀    \n                                 ⡠⠊                         ⠑⢄  \n⢀                              ⡠⠊                             ⠑⢄\n ⠑⢄                          ⡠⠊                                 \n   ⠑⢄                     ⢀⡠⠊                                   \n     ⠉⠢⡀                ⢀⠔⠁                                     \n       ⠈⠑⠤⣀          ⣀⠤⠊⠁                                       \n           ⠉⠒⠢⠤⠤⠤⠤⠒⠒⠉    \n\n\n ⣤\n⣀⣠⣴⣿⣿⣿⣿⣶⣾⣿⣷⣦⣤                                       \n\n  ┌────────────────────────────────┐\n  ┤              ▄▄▄               │  \n  ┤             █████              │\n  ┤           ▄███████▄            │ \n0 ┤______▄▄▄█████████████▄▄▄_______│ \n  └┬──┬──┬──┬──┬──┬──┬──┬──┬──┬──┬─┘\n  ⁻⁵ ⁻⁴ ⁻³ ⁻² ⁻¹  ⁰  ¹  ²  ³  ⁴  ⁵\n\n  ┌────────────────────────────────┐\n  ┤               ┊                │  \n  ┤               ┊ ╱              │\n  ┤               ┊╱               │ \n0 ┤┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈│ \n  └┬──┬──┬──┬──┬──┬──┬──┬──┬──┬──┬─┘\n\n▁▂▃▄▅▆▇█\n\n  ┌\nA ┤▄▄▄▄▄▄▄  ▬▬▬▬▬\nB ┤▄▄▄▄▄▄▄  ▬▬▬▬▬\n  └\n \n  \nA ┤━━━━━━━━━━━━ 62.5%\nB ┤━━━━━━━━━━━━━━━━ 85.0%\n  \n \n  ┌\nA ┤█████████████      70%\n  │\nB ┤█████████████████▌ 85%\n  └\n \n \n  ┌─────────────────────┐\nA ┤╺━━━━━━━━━━━━        │ 62.5%   \nB ┤╺━━━━━━━━━━━━━━━━╸   │ 85.0%\nC ┤╺━━━━━━━━━╸          │ 50.0%\n  └┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴┘\n   ⁰ ¹ ² ³ ⁴ ⁵ ⁶ ⁷ ⁸ ⁹ ¹⁰\n \n  ┌───────────────────────────────┐\nA ┤  ┝━━███━━┥                    │ 62.5%   \nB ┤        ┝━━██▊██━━━┥           │ 85.0%\nC ┤              ├┄┄╊━━█━━╉┄┄┤    │ 50.0%\nD ┤    ├───█─┤                    │ 27.3%\n  └┴──┴──┴──┴──┴──┴──┴──┴──┴──┴──┴┘\n   ⁰  ¹⁰ ²⁰ ³⁰ ⁴⁰ ⁵⁰ ⁶⁰ ⁷⁰ ⁸⁰ ⁹⁰ ¹⁰⁰\n \n ├┄┄╊━━█━━╉┄┄┤\n \n ├┈┈┈┈┈╊━━━╋━╉┈┈┈┈┤\n \n├┈┈┈┈┈╊━━━┿━╉┈┈┈┈┤\n \n ├┈┈┈┈┾━╋━┽┈┈┈┈┤\n \n \n┌┬┬┬┬┬╂┬┬┬┬┬┬┬┬┬┬┬┬┬┐\n0    ⁵    1    ⁵    2\n \n       ┌────┰──┐\n A └┈┈┈┴────┸──┴┈┈┈┘\n \n \n╫╧╧ ╪\n \n \n├┈┺━╏━┹┈┈┤\n \n├───╂─┤\n \n1 ┌\n½ ├ ▄  \n¼ ├ █  █  \n0 └─┬──┬─\n    A  B\n   \n▁▂▃▄▅▆▇█\n \n▄ ▖ ▀ ━ ╸\n \n \n ╱\n╱\n \n  ┌────────────┐\n5 ┤            │    \n3 ┤   ╻ ╻ ┃    │ \n1 ┤ ╻┃┃┃┃┃┃╻   │ \n  └────────────┘\n    ABCDEFGH\n \n    ╻╻\n  ╻┃┃┃┃╻ \n─┸┸┸┸┸┸┸┸┰┰┰┰┰┰┰┰  \n          ╹┃┃┃┃╹\n            ╹╹\ngithub.com/JuliaPlots/UnicodePlots.jl\nFloorPlan\n╔════════╦═══╦═════╗\n║        ║   ║     ║  \n│   WZ   ║         │\n│        ║   ╠═════╣\n║        ║         /\n╠════   ═╬         ║\n║        /         ║\n║        ╠_  ══════╣\n│   EZ   ║         ║\n│        ║  Küche  │\n║        ║         ║\n╚════════╩═════════╝\n\nLayer Charts\n┌────────┐                    \n│weblayer│                    \n└┬─┬─┬───┘                    \n │ │┌▽────────────────────────┐\n │ ││chrome                   │\n │ │└┬─────┬─────────────────┬┘\n │┌▽─▽────┐│                 │\n ││content││                 │\n │└┬─┬─┬──┘│                 │\n │ │ │┌▽───▽──────────────┐  │\n │ │ ││blink              │  │\n │ │ │└┬──┬───┬─┬───┬───┬─┘  │\n │ │┌▽─▽┐┌▽──┐│┌▽─┐┌▽─┐┌▽───┐│\n │ ││net││WTF│││v8││CC││skia││\n │ │└┬──┘└┬──┘│└──┘└──┘└────┘│\n┌▽─▽─▽────▽───▽──────────────▽┐\n│base                         │\n└─────────────────────────────┘\n \n  \n \n ╭┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╮                         ╭┈┈┈┈┈┈┈┈┈┈┈╮\n ┊ mount passphrase ┊━━━━━⎛key derivation⎞━━━▶┊ mount key ┊\n ╰┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈╯ ,───⎝   function   ⎠    ╰┈┈┈┈┈┬┈┈┈┈┈╯\n ╭──────╮            ╱                              │\n │ salt │───────────´                               │\n ╰──────╯                                           │\n ╭─────────────────────╮                            ▼         ╭┈┈┈┈┈┈┈┈┈┈┈┈╮\n │ encrypted master key│━━━━━━━━━━━━━━━━━━━━━━(decryption)━━━▶┊ master key ┊\n ╰─────────────────────╯                                      ╰┈┈┈┈┈┈┈┈┈┈┈┈╯\n\nPinOut Diagrams\n                               +-----+\n  +----[PWR]-------------------| USB |--+\n  |                            +-----+  |\n  |         GND/RST2  [ ][ ]            |\n  |       MOSI2/SCK2  [ ][ ]  A5/SCL[ ] |   C5\n  |          5V/MISO2 [ ][ ]  A4/SDA[ ] |   C4\n  |                             AREF[ ] |\n  |                              GND[ ] |\n  | [ ]N/C                    SCK/13[ ] |   B5\n  | [ ]IOREF                 MISO/12[ ] |   .\n  | [ ]RST                   MOSI/11[ ]~|   .\n  | [ ]3V3    +---+               10[ ]~|   .\n  | [ ]5v    -| A |-               9[ ]~|   .\n  | [ ]GND   -| R |-               8[ ] |   B0\n  | [ ]GND   -| D |-                    |\n  | [ ]Vin   -| U |-               7[ ] |   D7\n  |          -| I |-               6[ ]~|   .\n  | [ ]A0    -| N |-               5[ ]~|   .\n  | [ ]A1    -| O |-               4[ ] |   .\n  | [ ]A2     +---+           INT1/3[ ]~|   .\n  | [ ]A3                     INT0/2[ ] |   .\n  | [ ]A4/SDA  RST SCK MISO     TX&gt;1[ ] |   .\n  | [ ]A5/SCL  [ ] [ ] [ ]      RX&lt;0[ ] |   D0\n  |            [ ] [ ] [ ]              |\n  |  UNO_R3    GND MOSI 5V  ____________/\n  \\_______________________/\nPCB Schematics\nResistors:  ─VVVV─    ──███──  ──▭──  ──▬──  \nDiodes:     ──▷├──   ──┨◁──\nCapacitor:  ──┨┠──   ──┨┠──\nGap:        ──▷ ◁──\nSrc/GND:\n \n △\n │     |     |\n │     █ R2  ║\n │     |  \n━┷━\nVDD   ─────────────┬─────────┬─────┬─────────────────┬─────┬─────────┐\n                   │         │     │                 │     │         │    \n                   │         │     │                 │     │         │    \n               ║───┘     ║───┘     └───║         ║───┘     └───║     └───║        \n    vclk o────o║────────o║             ║o──   ──o║             ║o────────║o────o   \n               ║───┐     ║───┐     ┌───║   ╲ ╱   ║───┐     ┌───║     ┌───║    \n                   │         │     │        ╳        │     │         │    \n                   │         └─────┼──────── ────────┼─────┘         │             \n                   │               │        ╳        │               │    \n                   │               └───║   ╱ ╲   ║───┘               │    \n                   │                   ║───   ───║                   │          \n                   │               ┌───║         ║───┐               │    \n                   │               │                 │               │    \n                   └───────────────┤                 ├───────────────┘        \n                                   │                 │    \n                               ║───┘                 └───║                \n                    vinp o─────║                         ║o────o vinn        \n                               ║───┐                 ┌───║                \n                                   └────────┬────────┘    \n                                            │    \n                                            │    \n                                        ║───┘    \n                              vclk o────║        \n                                        ║───┐    \n                                            │    \n                                            │    \n  VSS ─────────────────────────────────────────────────────────────────\n \n  \n \n                         ___+5V\n                          |\n                         _|_\n                        _\\_/_  LED\n         ____             |\nTTL ____|6k8 |__________|/\n        |____|    |     |\\e\n                 _|_     _|_\n                |4k7|   |270|\n                |_ _|   |_ _|\n                  |       |\n                 _|_______|_GND\n \nSecuence Diagrams\n┌───────┐  ┌───────┐ ┌───────┐\n│Actor 1│  │Actor 2│ │Actor 3│\n└───┬───┘  └───┬───┘ └───┬───┘\n    │          │         │    \n    │message 2 │         │    \n    │─────────&gt;│         │    \n    │          │         │    \n    │          │message 1│    \n    │          │────────&gt;│    \n┌───┴───┐  ┌───┴───┐ ┌───┴───┐\n│Actor 1│  │Actor 2│ │Actor 3│\n└───────┘  └───────┘ └───────┘\nplantuml.com/de/ascii-art\nChemical Formulas\nASCII:\nR                         R         O\n \\                         \\        ║\n  N = C = O  +  O   ––→     N - C - O - R²\n               H R²         H\nOscilloscope Signals\nASCII:\n      __    __   __ ___     __   __     __   __        _\nSDA ··  \\__/__···__X___\\___/__···__\\___/__···__\\______/\n      ____   _ _ _   _   _   _ _ _   _   _ _ _   _   ___\nSCL ··    \\_/ 0-6 \\_/7\\_/8\\_/ 0-7 \\_/8\\_/ 0-7 \\_/8\\_/\n        S     Addr  RW  ACK   Cmd   ACK   Data  ACK   P\n \n \n  __\n ╱\n╱\nArchitecture Diagrams\n  vncviewer         .-,(  ),-.    \n   __  _         .-(          )-.           gateway           vncserver\n  [__]|=|  ----&gt;(    internet    )-------&gt; __________ ------&gt; ____   __\n  /::/|_|        &#039;-(          ).-&#039;        [_...__...°]       |    | |==|\n                     &#039;-.( ).-&#039;                               |____| |  |\n                                                             /::::/ |__|\nGit Trees\nfeature-branch ┈┈┈┈┈┈╭●───●───●\n                     │\nmaster ─────●───●───●╯\nChess Boards\n╔═══╤═══╤═══╤═══╤═══╤═══╤═══╤═══╗╮\n║ ♜ │░♞░│ ♝ │░♛░│ ♚ │░♝░│ ♞ │░♜░║8\n╟───┼───┼───┼───┼───┼───┼───┼───╢┊\n║░♟░│ ♟ │░♟░│ ♟ │░♟░│ ♟ │░♟░│ ♟ ║7\n╟───┼───┼───┼───┼───┼───┼───┼───╢┊\n║   │░░░│   │░░░│   │░░░│   │░░░║6\n╟───┼───┼───┼───┼───┼───┼───┼───╢┊\n║░░░│   │░░░│   │░░░│   │░░░│   ║5\n╟───┼───┼───┼───┼───┼───┼───┼───╢┊\n║   │░░░│   │░░░│   │░░░│   │░░░║4\n╟───┼───┼───┼───┼───┼───┼───┼───╢┊\n║░░░│   │░░░│   │░░░│   │░░░│   ║3\n╟───┼───┼───┼───┼───┼───┼───┼───╢┊\n║ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ │ ♙ ║2\n╟───┼───┼───┼───┼───┼───┼───┼───╢┊\n║ ♖ │ ♘ │ ♗ │ ♕ │ ♔ │ ♗ │ ♘ │ ♖ ║1\n╚═══╧═══╧═══╧═══╧═══╧═══╧═══╧═══╝┊\n╰┈a┈┈┈b┈┈┈c┈┈┈d┈┈┈e┈┈┈f┈┈┈g┈┈┈h┈┈╯\n\n\n\nqwerty.dev/chess-symbols-to-copy-and-paste/#beautiful-dingbats\nUnicode Fun:\n\nCopy in gras\n\nกิิิิิิิิิิิิิิิิิิิิ ก้้้้้้้้้้้้้้้้้้้้ ก็็็็็็็็็็็็็็็็็็็็ ก็็็็็็็็็็็็็็็็็็็็ กิิิิิิิิิิิิิิิิิิิิ ก้้้้้้้้้้้้้้้้้้้้ ก็็็็็็็็็็็็็็็็็็็็ กิิิิิิิิิิิิิิิิิิิิ ก้้้้้้้้้้้้้้้้้้้้ กิิิิิิิิิิิิิิิิิิิิ ก้้้้้้้้้้้้้้้้้้้้ ก็็็็็็็็็็็็็็็็็็็็ ก็็็็็็็็็็็็็็็็็็็็ กิิิิิิิิิิิิิิิิิิิิ ก้้้้้้้้้้้้้้้้้้้้ ก็็็็็็็็็็็็็็็็็็็็ กิิิิิิิิิิิิิิิิิิิิ ก้้้้้้้้้้้้้้้้้้้้   \n\n📚 References\n\nauthors.ietf.org/diagrams\nasciiflow.com/#/\n"},"tech/Universal-Project-Folder-Structure":{"title":"Universal Project Folder Structure","links":[],"tags":[],"content":"I have many projects. Some are research, some are code, some are physical DIYs, and some are pure documentation. Most projects start small but quickly grow into a mess, if I do not enforce a clean structure on them. What if we could organize most projects with a similar folder structure, such that it is easy for you and for others to navigate the folders and understand where each file belongs?\nHere is my proposal for a folder structure that can be applied on almost all your file-based coding projects:\nproject-name/ \n│  \n├─ build/         the final generated product  \n├─ docs/          description of the product  \n├─ lib/           external dependencies maintained elsewhere\n├─ make/          toolchain for making the product  \n│  ├─ config/  \n│  └─ tools/  \n├─ res/           static resources like images/audio  \n│  ├─ img/  \n│  │  └─ dia/  \n│  └─ css/  \n├─ src/           blueprint of the product**,** e.g. code  \n├─ test/          quality assurance of the product  \n├─ tmp/           ALL temporary generated files  \n│  ├─ objs/  \n│  └─ logs/  \n├─ xtra/          extra files not belonging elsewhere  \n├─ Makefile       Trigger for setup/build/install  \n└─ README.md      Information entry point\n\nFeatures — Why should you use this?\n\nmost important user folders (build, docs) are sorted to the top. (you could also rename build to app or bin)\nleast important folders (tmp, extra) are sorted to the bottom.\nclear separation of dynamic files (src) and static files (res, lib)\nclear separation of own code (src) and foreign code (lib)\none folder for all temporary files with a descriptive name. Everyone will know that files in tmp can be deleted any time.\nnames reflect categories and not specific formats (e.g. img not jpg/png, make not cmake/waf)\nnames start with a different letter which makes keyboard navigation fast (except for tmp)\nnames are short, which keeps overall path lengths short\nnames are common and should be intuitive for most developers\n"}}